substitutions:
  friendly_name: Console Fan

esphome:
  name: console-test

#########################
# ESP32 AND NETWORK SETUP

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# # pid climate log update is noisy, dial it back to warn
# logger:

# # default HA integration, OTA updater and backup http web portal
# api:
# ota:
# captive_portal:

# wifi:
#   # Read the wifi/pass from secrets.yaml:
#   # wifi_ssid: "My Wifi XX"
#   # wifi_password: "XXXXXXX"
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password

# text_sensor:
#   # Send IP Address
#   - platform: wifi_info
#     ip_address:
#       name: $friendly_name IP Address

#   # Send Uptime in raw seconds
#   - platform: template
#     name: $friendly_name Uptime
#     id: uptime_human
#     icon: mdi:clock-start

# sensor:
#   # Send WiFi signal strength & uptime to HA
#   - platform: wifi_signal
#     name: $friendly_name WiFi Strength
#     update_interval: 60s

#   # This is a bit of overkill. It sends a human readable
#   # uptime string
#   # 1h 41m 32s instead of 6092 seconds
#   - platform: uptime
#     name: $friendly_name Uptime
#     id: uptime_sensor
#     update_interval: 60s
#     on_raw_value:
#       then:
#         - text_sensor.template.publish:
#             id: uptime_human
#             # Custom C++ code to generate the result
#             state: !lambda |-
#               int seconds = round(id(uptime_sensor).raw_state);
#               int days = seconds / (24 * 3600);
#               seconds = seconds % (24 * 3600);
#               int hours = seconds / 3600;
#               seconds = seconds % 3600;
#               int minutes = seconds /  60;
#               seconds = seconds % 60;
#               return (
#                 (days ? to_string(days) + "d " : "") +
#                 (hours ? to_string(hours) + "h " : "") +
#                 (minutes ? to_string(minutes) + "m " : "") +
#                 (to_string(seconds) + "s")
#               ).c_str();

sensor:
  # GET TEMP/HUMIDITY FROM DHT11
  - platform: dht
    pin: 33
    temperature:
      name: "Temperature"
      id: console_fan_temperature
      accuracy_decimals: 3

      # If you don't smooth the output readings
      # the PID controller over reacts to small changes.
      filters:
        # - sliding_window_moving_average:
        #     window_size: 6
        #     send_every: 1
        #     send_first_at: 1
        - exponential_moving_average:
            alpha: 0.1
            send_every: 1

#     humidity:
#       name: "Humidity"
#       id: console_fan_humidity

#     # the DHT11 can only be read every 1s. Use 1.3s to be safe.
#     # Note that 15 x 1.3s means that the true temperature may
#     # take 19.5s to emerge
#     update_interval: 1.3s

#   # Take the "COOL" value of the pid and send
#   # it to the frontend to graph the output voltage
#   # sensor:
#   # - platform: pid
#   #   name: "Fan Speed (PWM Voltage)"
#   #   climate_id: console_thermostat
#   #   type: COOL

# number:
#   - platform: template
#     name: Target Humidity
#     id: target_value
#     mode: auto
#     unit_of_measurement: humidity
#     max_value: 100
#     min_value: 0
#     step: 1
#     optimistic: true
#     # Optional variables:
#     icon: "mdi:volume-high"

output:
  - platform: ledc
    id: console_heat_speed
    pin: GPIO32

  # Wire this pin (15) into the PWM pin of your 12v fan
  # ledc is the name of the pwm output system on an esp32
  - platform: ledc
    id: console_fan_speed
    pin: GPIO25

    # 25KHz is standard PC fan frequency, minimises buzzing
    frequency: "25000 Hz"

    # my fans stop working below 13% powerful.
    # also they're  powerful and loud, cap their max speed to 80%
    min_power: 13%
    max_power: 80%

# # Good for debugging, you can manually set the fan speed.
# fan:
#   - platform: speed
#     output: console_fan_speed
#     name: "Console Fan Speed"

climate:
  - platform: pid
    id: console_thermostat_old
    name: "Console Fan Thermostat"

    sensor: console_fan_temperature

    default_target_temperature: 21
    cool_output: console_fan_speed

    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0

pid_control:
  - id: humidity_controller
    name: "Console Fan Thermostat"

    sensor: console_fan_temperature

    default_target: 21
    increase_output: console_fan_speed
    # cool_output: console_fan_speed

    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0
  - id: blah
    default_target: 22
    # increase_output: console_fan_speed
    sensor: console_fan_temperature
    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0

switch:
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: "Console Fan ESP32 Restart"
